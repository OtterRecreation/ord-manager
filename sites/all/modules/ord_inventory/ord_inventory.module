<?php

/*
Should put some doxygen stuff in here
*/

//simply define the permission. the logic is handled by user_access('permission')
function ord_inventory_permission() {

  $permission['add item'] = array('title' => t('Add item'));
  $permission['view own item'] = array('title' => t('View own item'));
  $permission['edit own item'] = array('title' => t('Edit own item'));
  $permission['view any item'] = array('title' => t('View any item'));
  $permission['edit any item'] = array('title' => t('Edit any item'));

  return $permission;

}


function ord_inventory_help($path, $args) {

	switch ($path) {
		case 'admin/help#ord_inventory':
			return '<p>' . t('temporary help text for now') . '</p>';
		break;
	}

}

function ord_inventory_block_info() {

	$block['ord_inventory_graph'] = array(
		'info' => 'Inventory Analytics - Chart'
	);

	return $block;
}

function ord_inventory_block_view($delta = '') {

	$block = array();

	switch ($delta) {
		case 'ord_inventory_graph':
			$block['subject'] = null;
			//lets see if we can have a form in this thing
			$block['content'] = drupal_get_form('ord_inventory_new_item_form');
		break;
	}

	return $block;
}

function ord_inventory_new_item_form($form, &$form_state) {
	
	$form['item_name'] = array(
		'#type' => 'textfield',
		'#required' => true,
		'#title' => t('item name'),
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'submit',
	);

	return $form;
}

/**
 * Implements hook_menu().
 */
//NOTE: this is only run when the module is either installed or updated! therefore permissions won't take effect here
function ord_inventory_menu() {
    //list of items
    $items['ord_inventory/items'] = array(
      'title' => 'Rentals',
      'description' => 'Show a page with a long list across multiple pages',
      'page callback' => 'ord_inventory_items',
      'access arguments' => array('view any item'), //only show the page when this is satisfied
    );

    //add new item
    $items['ord_inventory/items/add'] = array(
      'title' => 'Add Item',
      'description' => 'Show a page that will allow the permitted user to create a new item',
      'page callback' => 'ord_inventory_new_item',
      'access arguments' => array('add new item'),
    );

    return $items;
}

function ord_inventory_items() {
    //this allows us to sort by these fields
    $header = array(
      array('data' => t('Name'), 'field' => 'd.name'),
      array('data' => t('Description') , 'field' => 'd.description'),
      array('data' => t('Price'), 'field' => 'd.rental_price'),
    );

    // We are extending the PagerDefault class here as well as the TableSort class
    $query = db_select('ord_inventory_items', 'd')->extend('PagerDefault')->extend('TableSort');
    $query->fields('d', array('id', 'description', 'rental_price'));

    // Change the number of rows with the limit() call.
    $result = $query
      ->limit(10) //change this number to make it page more...
      ->orderByHeader($header)
      ->execute();

    $rows = array();
    foreach ($result as $row) {
      // Normally we would add some nice formatting to our rows
      // but for our purpose we are simply going to add our row
      // to the array.
      $rows[] = array('data' => (array) $row);
    }

    // Create a render array ($build) which will be themed as a table with a
    // pager.
    $build['ord_inventory_table'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => t('No items yet'),
    );

    // Attach the pager theme.
    $build['pager_pager'] = array('#theme' => 'pager');

    return $build;
}

/**
 * @} End of "defgroup pager_example".
 */

//override some of the page stuff
function ord_inventory_page_build(&$page) {

  //probably not the best way to check the page (since this link can change based on settings)
  if( current_path() == 'ord_inventory/items' ) {
      //now check the permissions
      if(user_access('edit any item'))
      {
        $page['content']['#sorted'] = FALSE; //required for the weight to work?

        $page['content']['before'] = array(
            '#markup' => '<a class="btn btn-success pull-right">Add item</a>',
            '#weight' => 0, //means it will show up first
        );
      }
  }
}