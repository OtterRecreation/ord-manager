<?php

/*
Should put some doxygen stuff in here
*/
function ord_inventory_help($path, $args) {

	switch ($path) {
		case 'admin/help#ord_inventory':
			return '<p>' . t('temporary help text for now') . '</p>';
		break;
	}

}

function ord_inventory_block_info() {

	$block['ord_inventory_graph'] = array(
		'info' => 'Inventory Analytics - Chart'
	);

	return $block;
}

function ord_inventory_block_view($delta = '') {

	$block = array();

	switch ($delta) {
		case 'ord_inventory_graph':
			$block['subject'] = null;
			//lets see if we can have a form in this thing
			$block['content'] = drupal_get_form('ord_inventory_new_item_form');
		break;
	}

	return $block;
}

function ord_inventory_new_item_form($form, &$form_state) {
	
	$form['item_name'] = array(
		'#type' => 'textfield',
		'#required' => true,
		'#title' => t('item name'),
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'submit',
	);

	return $form;
}

//BEGIN THE NODE_MODULE PORTION
function ord_inventory_node_info() {
  
  return array(
    'ord_inventory_admin' => array(
      'name' => t('Ord Inventory - Admin'),
      'base' => 'ord_inventory',
      'description' => t('Used to be a page to help manage the back end of the inventory system.'),
      'title_label' => t('Ord Inventory for Admins'),
      'locked' => TRUE, // machine name will be unchangable
    ),
    'ord_inventory_user' => array(
      'name' => t('Ord Inventory - User'),
      'base' => 'ord_inventory',
      'description' => t('Used to be a page to help manage the front end of the inventory system.'),
      'title_label' => t('Ord Inventory for Users'),
      'locked' => TRUE, // machine name will be unchangable
    ),
  );
}

function ord_inventory_node_view($node, $view_mode, $langcode) {

  $node->content['my_additional_field'] = array(
    '#markup' => 'what goes here',
    '#weight' => 10,
    '#theme' => 'ord_inventory_my_additional_field',
  );

}

/**
 * Implements hook_menu().
 */
function ord_inventory_menu() {
  $items['ord_inventory/items'] = array(
    'title' => 'Rentals',
    'description' => 'Show a page with a long list across multiple pages',
    'page callback' => 'ord_inventory_page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Build the pager query.
 *
 * Uses the date_formats table since it is installed with ~35 rows
 * in it and we don't have to create fake data in order to show
 * this example.
 *
 * @return array
 *   A render array completely set up with a pager.
 */
function ord_inventory_page() {
  
  //this allows us to sort by these fields
  $header = array(
    array('data' => t('Name'), 'field' => 'd.name'),
    array('data' => t('Description') , 'field' => 'd.description'),
    array('data' => t('Price'), 'field' => 'd.rental_price'),
  );

  // We are extending the PagerDefault class here as well as the TableSort class
  $query = db_select('ord_inventory_items', 'd')->extend('PagerDefault')->extend('TableSort');
  $query->fields('d', array('id', 'description', 'rental_price'));

  // Change the number of rows with the limit() call.
  $result = $query
    ->limit(10) //change this number to make it page more...
    ->orderByHeader($header)
    ->execute();

  $rows = array();
  foreach ($result as $row) {
    // Normally we would add some nice formatting to our rows
    // but for our purpose we are simply going to add our row
    // to the array.
    $rows[] = array('data' => (array) $row);
  }

  // Create a render array ($build) which will be themed as a table with a
  // pager.
  $build['ord_inventory_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No items yet'),
  );

  // Attach the pager theme.
  $build['pager_pager'] = array('#theme' => 'pager');

  return $build;
}
/**
 * @} End of "defgroup pager_example".
 */